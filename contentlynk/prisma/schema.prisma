// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model - Core user information and wallet connection
model User {
  id              String         @id @default(cuid())
  email           String?        @unique
  password        String?        // Hashed password for credential auth
  walletAddress   String?        @unique
  username        String         @unique
  displayName     String?
  bio             String?
  avatar          String?
  membershipTier  String         @default("STANDARD")
  totalEarnings   Decimal        @default(0)
  isVerified      Boolean        @default(false)  // NFT verification
  isAdmin         Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Verification fields
  emailVerified   Boolean        @default(false) @map("email_verified")
  phoneNumber     String?        @unique @map("phone_number")
  phoneVerified   Boolean        @default(false) @map("phone_verified")
  signupIp        String?        @map("signup_ip")

  // Mode system fields
  trustScore      Int?           @default(100) @map("trust_score")
  status          String?        @default("ACTIVE")
  probationUntil  DateTime?      @map("probation_until")
  suspendedAt     DateTime?      @map("suspended_at")

  // Relations
  posts           Post[]
  earnings        Earning[]
  followers       Follow[]       @relation("UserFollowers")
  following       Follow[]       @relation("UserFollowing")
  likes           Like[]
  comments        Comment[]

  // NextAuth.js fields
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

// Membership Tiers based on NFT holdings (as strings for SQLite)
// STANDARD  - 55% revenue share - no NFTs
// SILVER    - 60% revenue share - Silver tier NFTs
// GOLD      - 65% revenue share - Gold tier NFTs
// PLATINUM  - 70% revenue share - Platinum tier NFTs
// GENESIS   - 75% revenue share - Genesis NFTs

// Content Posts
model Post {
  id          String   @id @default(cuid())
  title       String?
  content     String
  imageUrl    String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  views       Int      @default(0)
  likes       Int      @default(0)
  comments    Int      @default(0)
  shares      Int      @default(0)
  earnings    Decimal  @default(0)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Diversity tracking fields
  diversityScore      Float?   @map("diversity_score")
  top10Percentage     Float?   @map("top10_percentage")
  diversityPenalty    Float?   @map("diversity_penalty")
  lastDiversityCheck  DateTime? @map("last_diversity_check")

  // Relations
  postLikes   Like[]
  postComments Comment[]

  @@map("posts")
}

// Earnings Tracking
model Earning {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Decimal
  source      String
  postId      String?
  description String?
  txHash      String?       // Blockchain transaction hash when paid
  isPaid      Boolean       @default(false)
  createdAt   DateTime      @default(now())

  // Mode system fields
  heldUntil   DateTime?     @map("held_until")
  holdReason  String?       @map("hold_reason")

  @@map("earnings")
}

// Earning Sources (as strings for SQLite)
// AD_REVENUE, TIPS, NFT_SALES, BRAND_PARTNERSHIP, CONTENT_VIEWS, ENGAGEMENT_BONUS

// Social Features
model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Beta Application Model - For tracking creator beta applications
model BetaApplication {
  id          String   @id @default(cuid())
  name        String
  email       String
  platform    String   // instagram, tiktok, youtube, twitter, facebook, other
  niche       String
  posts       Int      // Typical monthly posts
  engagement  String   // Average post engagement description
  reason      String   // Why they want to join
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED, WAITLIST
  reviewedAt  DateTime?
  reviewNotes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("beta_applications")
}

// Email Verification Tokens
model EmailVerificationToken {
  id         String   @id @default(cuid())
  userId     String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@map("email_verification_tokens")
}

// Phone Verification Codes
model PhoneVerificationCode {
  id          String    @id @default(cuid())
  userId      String
  phoneNumber String    @map("phone_number")
  code        String
  expires     DateTime
  used        Boolean   @default(false)
  usedAt      DateTime? @map("used_at")
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([phoneNumber])
  @@index([code])
  @@map("phone_verification_codes")
}

// IP Tracking for Signup Rate Limiting
model SignupIpTracking {
  id        String   @id @default(cuid())
  ipAddress String   @map("ip_address")
  userId    String   @map("user_id")
  createdAt DateTime @default(now())

  @@index([ipAddress])
  @@index([createdAt])
  @@map("signup_ip_tracking")
}

// Phone Number Usage Tracking (max 3 accounts per phone)
model PhoneUsageTracking {
  id          String   @id @default(cuid())
  phoneNumber String   @map("phone_number")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now())

  @@index([phoneNumber])
  @@map("phone_usage_tracking")
}

// SMS Rate Limiting (max 3 SMS per phone per hour)
model SmsRateLimit {
  id          String   @id @default(cuid())
  phoneNumber String   @map("phone_number")
  sentAt      DateTime @default(now()) @map("sent_at")

  @@index([phoneNumber])
  @@index([sentAt])
  @@map("sms_rate_limit")
}

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  usedAt    DateTime? @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@index([expires])
  @@map("password_reset_tokens")
}

// Creator Warnings - Progressive strike system
model CreatorWarning {
  id          String    @id @default(cuid())
  userId      String
  reason      String
  details     Json      @default("{}")
  strikeLevel String
  message     String
  action      String
  expiresAt   DateTime?
  clearedAt   DateTime?
  clearedBy   String?
  createdAt   DateTime  @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([clearedAt])
  @@map("creator_warnings")
}

// Flagged Content - Content under review for violations
model FlaggedContent {
  id          String    @id @default(cuid())
  contentId   String
  contentType String    // POST, COMMENT, USER
  reason      String
  details     Json      @default("{}")
  flaggedAt   DateTime  @default(now())
  resolved    Boolean   @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([contentId])
  @@index([resolved])
  @@index([createdAt])
  @@map("flagged_content")
}