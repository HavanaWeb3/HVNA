"use strict";(()=>{var e={};e.id=669,e.ids=[669],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},39491:e=>{e.exports=require("assert")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},82361:e=>{e.exports=require("events")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},63477:e=>{e.exports=require("querystring")},57310:e=>{e.exports=require("url")},73837:e=>{e.exports=require("util")},59796:e=>{e.exports=require("zlib")},40864:(e,r,s)=>{s.r(r),s.d(r,{originalPathname:()=>A,patchFetch:()=>R,requestAsyncStorage:()=>g,routeModule:()=>h,serverHooks:()=>E,staticGenerationAsyncStorage:()=>w});var a,t,i={};s.r(i),s.d(i,{POST:()=>y});var n=s(49303),o=s(88716),l=s(60670),u=s(87070),m=s(75571),p=s(95456),d=s(8194);(function(e){e.STANDARD="STANDARD",e.SILVER="SILVER",e.GOLD="GOLD",e.PLATINUM="PLATINUM",e.GENESIS="GENESIS"})(a||(a={})),function(e){e.AD_REVENUE="AD_REVENUE",e.TIPS="TIPS",e.NFT_SALES="NFT_SALES",e.BRAND_PARTNERSHIP="BRAND_PARTNERSHIP",e.CONTENT_VIEWS="CONTENT_VIEWS",e.ENGAGEMENT_BONUS="ENGAGEMENT_BONUS"}(t||(t={}));var c=s(91585),N=s(26033);let x=c.Ry({userId:c.Z_(),walletAddress:c.Z_().regex(/^0x[a-fA-F0-9]{40}$/,"Invalid wallet address"),membershipTier:c.jb(a),genesisCount:c.Rx().min(0),mainCollectionCount:c.Rx().min(0)});async function y(e){try{let r=await (0,m.getServerSession)(p.L);if(!r?.user?.id)return u.NextResponse.json({error:"Unauthorized"},{status:401});let s=await e.json(),a=x.parse(s);if(a.userId!==r.user.id)return u.NextResponse.json({error:"Forbidden"},{status:403});let t=await d._.user.update({where:{id:a.userId},data:{walletAddress:a.walletAddress,membershipTier:a.membershipTier,updatedAt:new Date},select:{id:!0,username:!0,walletAddress:!0,membershipTier:!0,totalEarnings:!0}});return console.log(`Membership tier updated for user ${t.username}:`,{walletAddress:a.walletAddress,membershipTier:a.membershipTier,genesisCount:a.genesisCount,mainCollectionCount:a.mainCollectionCount}),u.NextResponse.json({success:!0,user:t,nftHoldings:{genesisCount:a.genesisCount,mainCollectionCount:a.mainCollectionCount}})}catch(e){if(console.error("Error updating membership tier:",e),e instanceof N.jm)return u.NextResponse.json({error:"Invalid request data",details:e.errors},{status:400});return u.NextResponse.json({error:"Internal server error"},{status:500})}}let h=new n.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/user/update-membership/route",pathname:"/api/user/update-membership",filename:"route",bundlePath:"app/api/user/update-membership/route"},resolvedPagePath:"/Users/davidsime/hvna-ecosystem/contentlynk/src/app/api/user/update-membership/route.ts",nextConfigOutput:"",userland:i}),{requestAsyncStorage:g,staticGenerationAsyncStorage:w,serverHooks:E}=h,A="/api/user/update-membership/route";function R(){return(0,l.patchFetch)({serverHooks:E,staticGenerationAsyncStorage:w})}},95456:(e,r,s)=>{s.d(r,{L:()=>p});var a=s(13539),t=s(53797),i=s(8194),n=s(42023),o=s.n(n),l=s(91585);let u=l.Ry({email:l.Z_().email(),password:l.Z_().min(6)}),m=l.Ry({email:l.Z_().email(),username:l.Z_().min(3).max(20).regex(/^[a-zA-Z0-9_-]+$/,"Username can only contain letters, numbers, underscores, and hyphens"),password:l.Z_().min(6),displayName:l.Z_().optional()}),p={adapter:(0,a.N)(i._),providers:[(0,t.Z)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"},username:{label:"Username",type:"text"},displayName:{label:"Display Name",type:"text"},isRegister:{label:"Is Register",type:"text"}},async authorize(e){if(!e?.email||!e?.password)return null;try{if("true"===e.isRegister){console.log("Registration attempt:",{email:e.email,username:e.username,displayName:e.displayName});let r=m.parse({email:e.email,username:e.username,password:e.password,displayName:e.displayName});console.log("Validation passed:",r);let s=await i._.user.findFirst({where:{OR:[{email:r.email},{username:r.username}]}});if(console.log("Existing user check:",s),s)throw console.log("User already exists:",s.email,s.username),Error("User already exists with this email or username");await o().hash(r.password,12);let a=await i._.user.create({data:{email:r.email,username:r.username,displayName:r.displayName||r.username}});return{id:a.id,email:a.email,username:a.username,displayName:a.displayName||void 0}}{let r=u.parse({email:e.email,password:e.password}),s=await i._.user.findUnique({where:{email:r.email}});if(!s)return null;return{id:s.id,email:s.email,username:s.username,displayName:s.displayName||void 0}}}catch(e){return console.error("Auth error:",e),null}}})],session:{strategy:"jwt"},callbacks:{jwt:async({token:e,user:r})=>(r&&(e.username=r.username,e.displayName=r.displayName),e),session:async({session:e,token:r})=>(r&&(e.user.id=r.sub,e.user.username=r.username,e.user.displayName=r.displayName),e)},pages:{signIn:"/auth/signin"}}},8194:(e,r,s)=>{s.d(r,{_:()=>t});let a=require("@prisma/client"),t=globalThis.prisma??new a.PrismaClient}};var r=require("../../../../webpack-runtime.js");r.C(e);var s=e=>r(r.s=e),a=r.X(0,[276,834,70],()=>s(40864));module.exports=a})();